#
# Original author Rob Kutschke
#
# Setup the environment to build standalone BaBar code.
#
# The one required argument is the debug level, either prof or debug.
# It is sticky.  To build both debug and prof you need to create
# two build areas and run this script once in each area.
#

if [ "`basename $0 2>/dev/null`" = "setup.sh" ];then
    echo "You should be sourcing this file, not executing it."
    exit 1
fi

if [ "$#" != "1" ]; then
   echo "You must supply the debug level as an argument"
   return 1
fi

debug_level=${1}

if [ "${debug_level}" != "prof" ] && [ "${debug_level}" != "debug" ]; then
   echo "Unrecognized debug level: " ${debug_level}
   echo "Please give one of the supported levels: prof or debug "
   return 1
fi

# Protect against overwriting something that we should not.
isClean=1
if [ -e "SConstruct" ]; then
   echo "The file SConstruct already exists.  Please fix this and retry."
   isClean=0
fi

if [ -e "setup.sh" ]; then
   echo "The file setup.sh already exists.  Please fix this and retry."
   isClean=0
fi

if [ "${isClean}" = "0" ]; then
  return 1
fi

# The root of the source to be built is the directory in which this script is found.
package_source=`cd "$(dirname ${BASH_SOURCE:-$0})" >/dev/null 2>&1 && /bin/pwd | sed -e 's|/scripts$||' `
echo $package_source

cp ${package_source}/SConstruct .

cat >> setup.sh <<EOF
#
# Do not hand edit this file. It was generated by
# ${package_source}/scripts/newBuild.sh
#

if [ "`basename $0 2>/dev/null`" = "setup.sh" ];then
    echo "You should be sourcing this file, not executing it."
    exit 1
fi
export PACKAGE_SOURCE=${package_source}
export DEBUG_LEVEL=${debug_level}
source \${PACKAGE_SOURCE}/setup.sh
export LD_LIBRARY_PATH=\${PWD}/lib:\${LD_LIBRARY_PATH}
EOF

unset debug_level
unset package_source
