cmake_minimum_required(VERSION 3.9.0)

# Check + Enforce build type

set(default_build_type "Release")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui                                                                                                                                                           
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release")
endif()

if (CMAKE_BUILD_TYPE MATCHES "^(p|P)(rofile|rof)$")
    message(STATUS "Setting build type to 'Release' instead of '${CMAKE_BUILD_TYPE}'.")
    set(CMAKE_BUILD_TYPE "Release" CACHE
        STRING "Choose the type of build." FORCE)
endif()


if (NOT CMAKE_BUILD_TYPE MATCHES "^(Debug|Release)$")
    message(STATUS "Setting build type to '${default_build_type}' as neither Release or Debug was specified.")
    set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
        STRING "Choose the type of build." FORCE)
endif()

message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}" )


# use gcc where we can
set(CMAKE_C_COMPILER "gcc")
set(CMAKE_CXX_COMPILER "g++")

# enable c++17 standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED on)

# make sure CMake is able to find ROOT
list(APPEND CMAKE_PREFIX_PATH $ENV{ROOTSYS})


# Set project name and version
project (KinKal 
    LANGUAGES CXX 
    VERSION 0.0.1 
    DESCRIPTION "Kinematic Kalman filter track fit code package"
)


# find the ROOT dependency
find_package(ROOT REQUIRED COMPONENTS 
        Core RIO Net Hist GenVector MLP Graf Graf3d Gpad Tree 
        Rint Postscript Matrix Physics MathCore Thread Gui)

# include "useful" ROOT cmake functions
# which are useful for building dictionaries
include(${ROOT_USE_FILE})

# set RPATH options
set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# output shared libraries and executables in lib/ and bin/
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)

# enable tests
enable_testing()

# compiler flags
add_compile_options(
    # flags applied to ALL build types
    "-Wall" 
    "-Wno-unused-parameter" 
    "-Wno-unused-local-typedefs" 
    "-Werror" 
    "-gdwarf-2" 
    "-Werror=return-type" 
    "-Winit-self" 
    "-Woverloaded-virtual" 
    "-ftrapping-math"

    # debug flags
    "$<$<CONFIG:DEBUG>:-Og;-g>"

    # release flags
    "$<$<CONFIG:RELEASE>:-O3;-DNDEBUG;-fno-omit-frame-pointer>"
)

# add shared library targets
add_subdirectory(MatEnv)
add_subdirectory(KinKal)
add_subdirectory(UnitTests)

# install rules
include(GNUInstallDirs)

install(TARGETS KinKal MatEnv
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

message (STATUS "Writing setup.sh...")

file(WRITE ${PROJECT_BINARY_DIR}/setup.sh "
#
# Do not hand edit this file. It was generated by CMake.

(return 0 2>/dev/null) && sourced=1 || sourced=0
if [ \"\$sourced\" = \"0\" ];then
    echo \"You should be sourcing this file, not executing it.\"
    exit 1
fi
export PACKAGE_SOURCE=${CMAKE_SOURCE_DIR}
export DEBUG_LEVEL=${CMAKE_BUILD_TYPE}
source \${PACKAGE_SOURCE}/setup.sh

# Linux: 
export LD_LIBRARY_PATH=\${PWD}/lib:\${LD_LIBRARY_PATH}

# MacOS:
export DYLD_FALLBACK_LIBRARY_PATH=\${PWD}/lib:\${ROOT_LIB}:\${DYLD_FALLBACK_LIBRARY_PATH}

")
